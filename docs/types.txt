==== Brainstorming session #1 ====
Existing type hierarchy:

  Integer < Rational < Float

A "Combinatorics" type could be a subtype of rationals.

How to get 1000!/999!, for example, to evaluate to 1000 without doing a bunch of dumb computation.

Orrrrr...

  nCk = n!/k!(n-k)!

Depending on the size of n & k, may want to reduce this to an integer. Or resort to Sterling's approximation & make it a float.

Dunno how to keep it lazy. What sorta framework is required.

Factorial. A type of rational?

Fit into general framework of functions. Binary operators, functions of 2 arguments. Just parsed differently.

Ughhhh, I don't know anymore. Examples to handle:

  1000! + 250!
  nCk = n!/k!(n-k)!
  1000!/999!
  1000!^1000!
  10C3*p^4*(1-p)^7

After further consideration. Factorial type. Between Rational & Float. That will mean that integers & rationals are absorbed into Factorial type. Not sure.

If you try to do 1000!/999! naively in Python, you get an overflow. Okay, lazy approach is the only one that works in that case. But HOW DO YOU INTEGRATE IT INTO A LINEAR TYPE HIERARCHY? OR HOW DO YOU EXTEND THE HIERARCHY TO HANDLE IT?

==== Brainstorming session #2 ====
After messing around with the design of functions for a while, I think I've come up with a general solution. Based on stuff I've recalled from SICP.

Combinatoric type doesn't have to be a number.

Operations to consider: +, -, /, *, ^, %, !, C

Dispatch on function name & argument types:

  +, Combinatoric, Combinatoric   # resolve them, add the result
  /, Combinatoric, Combinatoric   # flip the second one, compose
  /, Combinatoric, Rational       # flip the rational, incorporate into Combinatoric
  /, Combinatoric, Float          # absorb float into running yolk
  /, Rational, Combinatoric       # similar to above
  /, Float, Combinatoric          # similar to above

Well, you get the point. It requires a lot of elbow grease, and lots of testing to cover all the cases, but I plan to have only 4-5 types, anyway.

Preserve the Number hierarchy.

  Integer < Rational < Float < Number

Just need a wrapper function for Python's built-in operators. Registers a function that takes 2 (or whatever) Number types, coerces them until they're the same, then applies the built-in operator to their internal type.

I believe this is what the SICP folks had in mind.

Closing thoughts:

* It won't take much "elbow grease" to implement this system before adding the Combinatoric / Factorial / Whatever type. Just need the wrapper for built-in operators.
* I haven't considered how this would integrate with units. Units can be an extra layer on top, perhaps? But they have to somehow be able to call into the dispatch system in order to do the conversions.
* More generally, need to be able to call dispatch system from within the functions.

==== Brainstorming session #3 ====
After letting it roll about in my head for a while, I think I need to integrate units into the type hierarchy. There should be a Unit type.

  Integer < Rational < Float < Number
  Combinatoric < Number
  Unit (on its own)
  Quantity (has a value & a unit)

Do Integer, Rational & Float need their own type, separate from Combinatoric?

Rational could be a subtype of Combinatoric. Combinatoric could be a subtype of Float. But I'm not sure.

Might be easier to add units first. They're kinda independent of the Combinatoric type.

Could Numbers be a unitless quantity? i.e. Number < Quantity. I should take a look @ Frink. Useful: http://futureboy.us/frinkdocs/#HowFrinkIsDifferent

Need to think through Quantity type, which operations / functions make sense with units.

+, -, /, *, ^, %, !, C

+: yes, units stay the same
-: yes, units stay the same
/: yes, creates a new unit
*: yes, creates a new unit
^: don't think so, but check Frink; I think only Unit^Number makes sense.
%: don't think so, but check Frink; Unit%Number makes sense.
!: no
C: no
sin/cos/tan: yes, with some units
sqrt: I think so, depending on the unit (you might end up with metres^(1/2), don't think that makes sense though)
ln, log10, log2, abs, floor, ceil, round, i, f: uhhh, I'm not sure. Could apply function to number part. 

==== Brainstorming session #4 ====
Playing around with Frink.

(3ft) % (2ft) is valid. Unit types have to be conforming when you do modulus, though.

Exponent must be dimensionless, i.e. 3^(2ft) is meaningless.

Frink seems to convert all units to the base types. And print them like that. It doesn't seem like you can do "5Pa 3s", for example, and get Pascal-seconds. Even though that's a valid measure that Frink recognises. You instead get it in terms of base units: "15 m^-1 kg s^-1".

That makes it easier to implement units, anyway.

My current understanding: define base units (kg, m, s, etc). All units are defined in terms of those, as a vector with the exponent of each base unit. Including the base units themselves (kg would be <1, 0, 0, ..., 0>). Dimensionless (?) units like radians are all zero.

That covers "coherent" units, i.e. ones that are defined solely in terms of the base units. "Incoherent" (?) units, like feet, come with a multiplier. Some units come with an offset.

Frink dodges the Celcius / Fahrenheit problem by not really supporting those units properly. You do C[5] to get 5 degrees Celcius, IN KELVINS. 5degC returns 5 Kelvins. It seems like degC is just an alias for Kelvin. So, let's say we call "5degC^2" in our magical language, what does it do? How does it convert that to Kelvins?

5degC = 5+273.15 (or whatever) Kelvins. What does degC^2 mean?

0 degC = 273.15K
0 degC^2 = 273.15^2 K^2
x degC = (x + 273.15) K
x degC^2 = (...) ???????????????

Can't get my head around that. Maybe, for now, I can omit units that use an offset / affine transformation / whatever.

OKAY. Interface could look something like this.

BaseUnits.METRE returns DimensionVector<1,0,0,...> (or whatever it's called).

register_unit("ft", "feet", 0.3*BaseUnits.METRE)

^ UnitSignature(multiplier=0.3, <1, 0, 0, ....>)

What happens when you do feet^2? UnitSignature(multiplier=0.3^2, <2, 0, 0, ...>)?

This is the last thing I have to figure out. And, I think you do need to keep track of the multiplier.

5ft / s <---- shit, a parsing ambiguity. Is is 5ft divided by the variable s, or 5ft per second?

That's 2 remaining challenges, that I'm aware of:
1) how to model units.
2) how to resolve that parsing ambiguity. I really want to be able to write 5ft/s, but it seems impossible to do that without treating units as variables and polluting the namespace, i.e. doing it the Frink way.

SOLUTION TO #2: 5ft|s, no parsing ambiguity. Works because I haven't added the logical OR operation.

SOLUTION TO #1: think of the problem starting from the parsing step. If we parse, say, "1 feet^2|s", then "feet" needs to return a DimensionVector (or whatever it's called). As does "s". We square the "feet" one, invert the "s" one. Except, there also needs to be a multiplier for "feet".

Maybe a unit can be a DimensionVector (or whatever)... plus a multiplier? In this case, we square the multiplier & apply it to the number.

Also, the multiplier thing has to be done at runtime, given that the value of the quantity could be stored in a variable.

OKAY. API:

  register_unit("feet", aliases=["ft", "foot"], 0.35*BaseUnits.METRE)

BaseUnits.METRE is actually a DimensionVector (or whatever). With a multiplier of 1. Multiplication is applied to the multiplier. Repeat this exercise for other possible units and we'll have the API figured. Q: how do you combine units? Q: how do you define units without a unique symbol, i.e. measures from existing units, e.g. m/s^2?

### Useful references
* https://frinklang.org
* https://en.wikipedia.org/wiki/International_System_of_Units
* https://en.wikipedia.org/wiki/Dimensional_analysis
* https://www.hillelwayne.com/post/frink/
* https://gmpreussner.com/research/dimensional-analysis-in-programming-languages
