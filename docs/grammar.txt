The grammar. Symbols given short names in order
to keep it concise. Kinda confusing usage of +
and *. [a-z]* means "0 or more of these terminal
symbols". X*, on the other hand, is the name of
a generating (?) symbol. But they're kinda related
uses.

High-level description: valid strings are sequences
of statements, separated by a semicolon. Each statement
can be either an assignment (create / change the value
of a variable), or an expression. An expression is a sum
of products. A product is a multiplication of factors.
A factor is.... you get the drift. Layering the grammar
in this way guarantees operator precedence.

X+ → X X*
X* → ε | ';' | ';' X X*
X  → A | E
A  → I '=' E
I  → [a-zA-Z][a-zA-Z0-9]*
E  → S+
S+ → P+ S*
S* → ε | [+-] P+ S*
P+ → F+ P*
P* → ε | [*/%] F+ P*
F+ → F F*
F* → ε | '^' F F*
F  → U T
U  → ε | [+-]
T  → '(' E ')' | N | I
N  → <a number of some description, I ain't
      gonna specify right now 'cause it's going
      to change>

Long names:
    X = statement
    A = assignment
    I = identifier
    E = expression
    S = sum
    P = product
    F = factor
    U = unary operator
    T = like an unsigned factor
